# === Documentation === #
# This is just a standard shell script, which is loaded from the
# post-receive hook when a new branch is created.

# Just don't forget that gems you have on your local machine probably
# aren't installed at the server, at least before you run gem bundle.

# Your working directory is root of your application which was just cloned
# here. (Probably) unlike to your local machine, basename is name of the branch,
# not name of the application. It shouldn't matter in most cases, but sometimes
# it does, for example in Python where you are using import myapp.something.
# 1) Write an awful perl-ish script with sed -i / perl -i / ruby -i and just replace
#    the name in your code. It might work, but come on, you don't want to do that.
# 2) Your application will be as a subdirectory of the root of the repository,
#    so you may call it whatever you want.
# 3) Obviously the best solution is to change the post-receive script, for example:
#    Task["deployer:compile_hook"].config[:target] = "myappname"

# Make sure this script isn't executable, otherwise the script will simply run,
# so you won't have access to shell functions from the post-receive hook.
# However this is useful if you want to run this script under another interpret.
# If you want to install hooks which will be executed rather than just
# loaded, use ./tasks.rb deployer:install --executable or add
# Task["deployer:install"].config[:executable] = false to your tasks.rb

# Also, post-receive hook run under /bin/sh by default, but you might want to
# use something more advance like bash or zsh. Since these shells are compatible
# with the original sh, it's easy, just run ./tasks.rb deployer:compile_hook --shebang="#!/bin/zsh"
# or add Task["deployer:compile_hook"].config[:shebang] = "#!/bin/zsh" to your tasks.rb and reinstall the hooks.

# Templates directory should be in .git_tpl/ in the git home directory
# for example: /srv/git/.git_tpl/

# Symlink public directory
# if [ -d $DOCROOT ] ; then
#     echo "Moved existing Web Root to $DOCROOT.orig"
#     mv $DOCROOT $DOCROOT.orig
# fi

# echo "Created Symlink to $DOCROOT"
# ln -s $TARGET/$PUBDIR $DOCROOT


. "$REPO/hooks/update"

info "clone hook ran!"
