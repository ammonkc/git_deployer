# === Documentation === #
# This is just a standard shell script, which is loaded from the
# post-receive hook each time a branch is updated.

# Just don't forget that gems you have on your local machine probably
# aren't installed at the server, at least before you run gem bundle.

# Your working directory is root of your application which was just cloned
# here. (Probably) unlike to your local machine, basename is name of the branch,
# not name of the application. It shouldn't matter in most cases, but sometimes
# it does, for example in Python where you are using import myapp.something.
# 1) Write an awful perl-ish script with sed -i / perl -i / ruby -i and just replace
#    the name in your code. It might work, but come on, you don't want to do that.
# 2) Your application will be as a subdirectory of the root of the repository,
#    so you may call it whatever you want.
# 3) Obviously the best solution is to change the post-receive script, for example:
#    Task["deployer:compile_hook"].config[:target] = "myappname"

# Make sure this script isn't executable, otherwise the script will simply run,
# so you won't have access to shell functions from the post-receive hook.
# However this is useful if you want to run this script under another interpret.
# If you want to install hooks which will be executed rather than just
# loaded, use ./tasks.rb deployer:install --executable or add
# Task["deployer:install"].config[:executable] = false to your tasks.rb

##################
## Triggers     ##
##################
trigger="[trigger:composer]"

if [[ "$msg" == *"$trigger"* ]]; then
    info "Triggering composer update"
    debug "COMMIT MESSAGE: $msg"
fi
